################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################

########################################################################
# Project setup
########################################################################
cmake_minimum_required(VERSION 2.8)
project(cfutures)
enable_language(C)
enable_testing()

set(SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")

########################################################################
# determine version
########################################################################
foreach(which MAJOR MINOR PATCH)
    file(
        STRINGS
        "${SOURCE_DIR}/include/cfutures_library.h"
        CFUTURES_VERSION_STRING REGEX
        "#define CFUTURES_VERSION_${which}"
    )
    string(
        REGEX MATCH
        "#define CFUTURES_VERSION_${which} ([0-9_]+)"
        CFUTURES_REGEX_MATCH
        "${CFUTURES_VERSION_STRING}"
    )
    if (NOT CFUTURES_REGEX_MATCH)
        message(
            FATAL_ERROR
            "failed to parse CFUTURES_VERSION_${which} from cfutures.h"
        )
    endif()
    set(CFUTURES_${which}_VERSION ${CMAKE_MATCH_1})
endforeach(which)

set(
    CFUTURES_VERSION
    ${CFUTURES_MAJOR_VERSION}.${CFUTURES_MINOR_VERSION}.${CFUTURES_PATCH_VERSION}
)

########################################################################
# platform.h
########################################################################
include(CheckIncludeFile)
CHECK_INCLUDE_FILE("linux/wireless.h" HAVE_LINUX_WIRELESS_H)
CHECK_INCLUDE_FILE("net/if_media.h" HAVE_NET_IF_MEDIA_H)

include(CheckFunctionExists)
CHECK_FUNCTION_EXISTS("getifaddrs" HAVE_GETIFADDRS)
CHECK_FUNCTION_EXISTS("freeifaddrs" HAVE_FREEIFADDRS)

include(CheckIncludeFiles)
check_include_files("sys/socket.h;net/if.h" HAVE_NET_IF_H)
if (NOT HAVE_NET_IF_H)
    CHECK_INCLUDE_FILE("net/if.h" HAVE_NET_IF_H)
endif()

file(WRITE "${SOURCE_DIR}/src/platform.h.in" "
#cmakedefine HAVE_LINUX_WIRELESS_H
#cmakedefine HAVE_NET_IF_H
#cmakedefine HAVE_NET_IF_MEDIA_H
#cmakedefine HAVE_GETIFADDRS
#cmakedefine HAVE_FREEIFADDRS
")

configure_file("${SOURCE_DIR}/src/platform.h.in" "${SOURCE_DIR}/src/platform.h")

#The MSVC C compiler is too out of date,
#so the sources have to be compiled as c++
if (MSVC)
    enable_language(CXX)
    file(GLOB sources "${SOURCE_DIR}/src/*.c")
    set_source_files_properties(
        ${sources}
        PROPERTIES LANGUAGE CXX
    )
    set(MORE_LIBRARIES ws2_32 Rpcrt4 Iphlpapi)
endif()

# required libraries for mingw
if (MINGW)
    set(MORE_LIBRARIES -lws2_32 -lrpcrt4 -liphlpapi)
endif()

# required libraries for cygwin
if (CYGWIN)
    set(MORE_LIBRARIES -luuid)
endif()

list(APPEND CMAKE_MODULE_PATH "${SOURCE_DIR}")
set(OPTIONAL_LIBRARIES)

########################################################################
# includes
########################################################################
set (cfutures_headers
    include/cfutures_library.h
    include/cfutures.h
    include/prelude.h
    include/future.h
    include/future_pool.h
    include/promise.h
    src/executor.h
    src/queue.h
)
source_group ("Header Files" FILES ${cfutures_headers})
install(FILES ${cfutures_headers} DESTINATION include)

########################################################################
# library
########################################################################
include_directories("${SOURCE_DIR}/src" "${SOURCE_DIR}/include")
set (cfutures_sources
    src/future.c
    src/future_pool.c
    src/promise.c
    src/executor.c
    src/queue.c
)
source_group("Source Files" FILES ${cfutures_sources})
if (NOT DEFINED BUILD_SHARED_LIBS)
    SET(BUILD_SHARED_LIBS ON)
endif()
add_library(cfutures ${cfutures_sources})
set_target_properties(cfutures
    PROPERTIES DEFINE_SYMBOL "LIBCFUTURES_EXPORTS"
)
set_target_properties(cfutures
    PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${SOURCE_DIR}/src"
)
target_link_libraries(cfutures
    ${ZEROMQ_LIBRARIES} ${MORE_LIBRARIES}
)

install(TARGETS cfutures
    LIBRARY DESTINATION "lib${LIB_SUFFIX}" # .so file
    ARCHIVE DESTINATION "lib${LIB_SUFFIX}" # .lib file
    RUNTIME DESTINATION bin              # .dll file
)

########################################################################
# pkgconfig
########################################################################
set(VERSION "${CFUTURES_VERSION}")
set(prefix "${CMAKE_INSTALL_PREFIX}")
set(exec_prefix "\${prefix}")
set(libdir "\${prefix}/lib${LIB_SUFFIX}")
set(includedir "\${prefix}/include")
configure_file(
    "${SOURCE_DIR}/src/libcfutures.pc.in"
    "${SOURCE_DIR}/src/libcfutures.pc"
@ONLY)

install(
    FILES "${SOURCE_DIR}/src/libcfutures.pc"
    DESTINATION "lib${LIB_SUFFIX}/pkgconfig"
)

########################################################################
# executables
########################################################################
add_executable(
    cfutures_selftest
    "${SOURCE_DIR}/src/cfutures_selftest.c"
)
target_link_libraries(
    cfutures_selftest
    cfutures
    ${OPTIONAL_LIBRARIES}
)
set_target_properties(
    cfutures_selftest
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${SOURCE_DIR}/src"
)

########################################################################
# tests
########################################################################
set(CLASSTEST_TIMEOUT 5 CACHE STRING "Timeout of the selftest of a class")
set(TOTAL_TIMEOUT 20 CACHE STRING "Timout of the total testsuite")

set(TEST_CLASSES
    future
    future_pool
    promise
    executor
    queue
)

foreach(TEST_CLASS ${TEST_CLASSES})
    add_test(
        NAME ${TEST_CLASS}
        COMMAND cfutures_selftest --continue --verbose --test ${TEST_CLASS}
    )
    set_tests_properties(
        ${TEST_CLASS}
        PROPERTIES TIMEOUT ${CLASSTEST_TIMEOUT}
    )
endforeach(TEST_CLASS)


########################################################################
# summary
########################################################################
message(STATUS "version: ${CFUTURES_VERSION}")
message(STATUS "install: ${CMAKE_INSTALL_PREFIX}")

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
